name: Reusable buildkit Build and Push

description: >
  Build and push Docker images to AWS ECR or Azure ACR using buildkit. Supports both pod identity and credential-based login.

on:
  workflow_call:
    inputs:
      path:
        description: 'Path to the build context'
        default: "."
        required: false
        type: string

      image:
        description: 'Image name (e.g. gitopsmanager)'
        required: true
        type: string

      tag:
        description: 'Tag for the image'
        default: ""
        required: false
        type: string

      build_file:
        description: 'Full path to the Dockerfile (relative to context)'
        required: false
        type: string

      extra_args:
        description: 'Additional buildkit args'
        default: ""
        required: false
        type: string

      aws_region:
        description: 'AWS region (for ECR)'
        default: "eu-west-1"
        required: false
        type: string

      aws_registry:
        description: 'AWS ECR registry hostname'
        required: false
        type: string

      azure_registry:
        description: 'Azure ACR registry hostname'
        required: false
        type: string

      push_aws:
        description: 'Whether to push to AWS ECR'
        required: false
        default: false
        type: boolean

      push_azure:
        description: 'Whether to push to Azure ACR'
        required: false
        default: false
        type: boolean

      runner:
        description: 'Runner label (e.g. ubuntu-latest or self-hosted)'
        required: false
        default: 'ubuntu-latest'
        type: string

    secrets:
      AZURE_CLIENT_ID:
        required: false
      AZURE_CLIENT_SECRET:
        required: false
      AZURE_TENANT_ID:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_SESSION_TOKEN:
        required: false

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    name: Build and Push Image with buildkit

    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: ‚ú® Compute image tag(s)
        id: tags
        run: |
          if [ -z "${{ inputs.tag }}" ]; then
            echo "IMAGE_TAG=${{ github.run_id }}" >> $GITHUB_ENV
            echo "ADDITIONAL_TAGS=" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ inputs.tag }}" >> $GITHUB_ENV
            echo "ADDITIONAL_TAGS=--destination=${{ inputs.aws_registry }}/${{ inputs.image }}:${{ github.run_id }}" >> $GITHUB_ENV
          fi


      - name: üîê Azure Login (if selected)
        if: inputs.push_azure == true
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: üîê ACR Login (if selected)
        if: inputs.push_azure == true
        run: |
          REGISTRY_NAME=$(echo "${{ inputs.azure_registry }}" | cut -d. -f1)
          az acr login --name "$REGISTRY_NAME"

      - name: üîß Install rsync (apt or yum)
        run: |
          if command -v apt-get &>/dev/null; then
            sudo apt-get update && sudo apt-get install -y rsync
          elif command -v yum &>/dev/null; then
            sudo yum install -y rsync
          else
            echo "‚ùå No supported package manager found for rsync." >&2
            exit 1
          fi

      - name: üìÇ Prepare BuildKit build context
        run: |
          mkdir -p ${{ github.workspace }}/buildkit-context
          rsync -av --exclude=buildkit-context ./ ${{ github.workspace }}/buildkit-context/

      - name: üì• Install BuildKit (buildctl)
        run: |
          curl -LO https://github.com/moby/buildkit/releases/download/v0.23.2/buildkit-v0.23.2.linux-amd64.tar.gz
          tar -xzf buildkit-v0.23.2.linux-amd64.tar.gz
          sudo mv bin/buildctl /usr/local/bin/



      - name: üîß Build list of output image targets
        id: output_tags
        run: |
          OUTPUT_NAMES=""
          if [[ "${{ inputs.push_aws }}" == "true" ]]; then
            OUTPUT_NAMES="name=${{ inputs.aws_registry }}/${{ inputs.image }}:${{ env.IMAGE_TAG }}"
          fi
          if [[ "${{ inputs.push_azure }}" == "true" ]]; then
            if [[ -n "$OUTPUT_NAMES" ]]; then
              OUTPUT_NAMES+=","
            fi
            OUTPUT_NAMES+="name=${{ inputs.azure_registry }}/${{ inputs.image }}:${{ env.IMAGE_TAG }}"
          fi
          if [[ -n "$OUTPUT_NAMES" ]]; then
            OUTPUT_NAMES+=",push=true"
          fi
          echo "OUTPUT_NAMES=$OUTPUT_NAMES" >> $GITHUB_ENV



      - name: üèóÔ∏è Build and push image(s)
        if: env.OUTPUT_NAMES != ''
        run: |
          buildctl build \
            --frontend=dockerfile.v0 \
            --local context=${{ github.workspace }}/buildkit-context \
            --local dockerfile=${{ github.workspace }}/buildkit-context \
            --output type=image,${{ env.OUTPUT_NAMES }} \
            --opt filename=${{ inputs.build_file || 'Dockerfile' }} \
            ${{ inputs.extra_args }} \
            ${{ env.ADDITIONAL_TAGS }}

