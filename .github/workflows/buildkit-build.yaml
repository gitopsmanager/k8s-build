name: Reusable buildkit Build and Push

description: >
  Build and push Docker images to AWS ECR or Azure ACR using buildkit. Supports both pod identity and credential-based login.

on:
  workflow_call:
    inputs:
      path:
        description: 'Path to the build context'
        default: "."
        required: false
        type: string

      image:
        description: 'Image name (e.g. gitopsmanager)'
        required: true
        type: string

      tag:
        description: 'Tag for the image'
        default: ""
        required: false
        type: string

      build_file:
        description: 'Full path to the Dockerfile (relative to context)'
        required: false
        type: string

      extra_args:
        description: 'Additional buildkit args'
        default: ""
        required: false
        type: string

      aws_region:
        description: 'AWS region (for ECR)'
        default: "eu-west-1"
        required: false
        type: string

      aws_registry:
        description: 'AWS ECR registry hostname'
        required: false
        type: string

      azure_registry:
        description: 'Azure ACR registry hostname'
        required: false
        type: string

      push_aws:
        description: 'Whether to push to AWS ECR'
        required: false
        default: false
        type: boolean

      push_azure:
        description: 'Whether to push to Azure ACR'
        required: false
        default: false
        type: boolean

      runner:
        description: 'Runner label (e.g. ubuntu-latest or self-hosted)'
        required: false
        default: 'ubuntu-latest'
        type: string

      using_aws_secrets:
        required: false
        default: false
        type: boolean

    secrets:
      AZURE_CLIENT_ID:
        required: false
      AZURE_CLIENT_SECRET:
        required: false
      AZURE_TENANT_ID:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_SESSION_TOKEN:
        required: false

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    name: Build and Push Image using Buildx

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4


      - name: 🔐 Azure Login (if selected)
        if: inputs.push_azure == true
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: 🔐 ACR Login (if selected)
        if: inputs.push_azure == true
        run: |
          REGISTRY_NAME=$(echo "${{ inputs.azure_registry }}" | cut -d. -f1)
          az acr login --name "$REGISTRY_NAME"

      - name: 🔐 ECR Login using secrets
        if: inputs.using_aws_secrets == 'true'
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}

      - name: 🔐 ECR Login using Pod Identity (fallback)
        if: inputs.using_aws_secrets != 'true'
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
        env:
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}



      - name: 🔧 Install rsync
        run: |
          if command -v apt-get &>/dev/null; then
            sudo apt-get update && sudo apt-get install -y rsync
          elif command -v yum &>/dev/null; then
            sudo yum install -y rsync
          else
            echo "❌ No supported package manager found for rsync." >&2
            exit 1
          fi

      - name: 📂 Prepare Build Context
        run: |
          mkdir -p ${{ github.workspace }}/buildkit-context
          rsync -av --exclude=buildkit-context ./ ${{ github.workspace }}/buildkit-context/

      - name: 🔧 Compute Docker image tags
        id: output_tags
        run: |
          TAGS=""

          if [[ "${{ inputs.push_aws }}" == "true" ]]; then
            TAGS="${{ inputs.aws_registry }}/${{ inputs.image }}:${{ github.run_id }}"
            if [[ -n "${{ inputs.tag }}" ]]; then
              TAGS+="\n${{ inputs.aws_registry }}/${{ inputs.image }}:${{ inputs.tag }}"
            fi
          fi

          if [[ "${{ inputs.push_azure }}" == "true" ]]; then
            if [[ -n "$TAGS" ]]; then TAGS+="\n"; fi
            TAGS+="${{ inputs.azure_registry }}/${{ inputs.image }}:${{ github.run_id }}"
            if [[ -n "${{ inputs.tag }}" ]]; then
              TAGS+="\n${{ inputs.azure_registry }}/${{ inputs.image }}:${{ inputs.tag }}"
            fi
          fi

          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and Push image(s)
        uses: docker/build-push-action@v5
        with:
          context: ./buildkit-context
          file: ./buildkit-context/${{ inputs.build_file || 'Dockerfile' }}
          push: true
          tags: ${{ steps.output_tags.outputs.tags }}
          build-args: |
            ${{ inputs.extra_args }}

